@code {
    [Parameter]
    public string Tag { get; set; } = "div";

    [Parameter]
    public bool Active { get; set; } = true;

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnMovingChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnDroppedToOther { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AllOtherAttributes { get; set; }

    private bool Moving { get; set; } = false;

    private bool Over { get; set; } = false;

    private RenderFragment? DynamicMarkup { get; set; }

    private async Task OnStart(DragEventArgs evt)
    {
        Moving = true;
        await OnMovingChanged.InvokeAsync(new(Index, Moving));
    }

    private void OnEnter(DragEventArgs evt)
    {
        if (!Moving)
        {
            Over = true;
        }
    }

    private void OnLeave(DragEventArgs evt)
    {
        if (!Moving)
        {
            Over = false;
        }
    }

    private async Task OnDrop(DragEventArgs evt)
    {
        bool self = Moving;

        Moving = false;
        Over = false;

        if (!self)
        {
            await OnDroppedToOther.InvokeAsync(Index);
        }
    }

    private async Task OnEnd(DragEventArgs evt)
    {
        Moving = false;
        await OnMovingChanged.InvokeAsync(new(Index, Moving));
    }

    private Action<DragEventArgs> OnOver = e => { };

    private string GetCss()
    {
        return $"drag-item {(!Active ? "" : Moving ? "dragging" : "draggable")} {(Over ? "over" : "")}".Trim();
    }

    private RenderFragment CreateDynamicMarkup() => builder =>
    {
        builder.OpenElement(0, Tag);
        builder.AddMultipleAttributes(1, AllOtherAttributes);
        builder.AddAttribute(2, "draggable", Active.ToString().ToLower());
        builder.AddAttribute(3, "class", GetCss());

        builder.AddAttribute(4, "ondragstart", OnStart);
        builder.AddAttribute(5, "ondrop", OnDrop);
        builder.AddAttribute(6, "ondragenter", OnEnter);
        builder.AddAttribute(7, "ondragleave", OnLeave);
        builder.AddAttribute(8, "ondragend", OnEnd);

        builder.AddAttribute(9, "ondragover", OnOver);
        builder.AddEventPreventDefaultAttribute(10, "ondragover", true);

        builder.AddContent(11, ChildContent);
        builder.CloseElement();
    };

    protected override void OnInitialized()
    {
        DynamicMarkup = CreateDynamicMarkup();
    }
}

@DynamicMarkup

