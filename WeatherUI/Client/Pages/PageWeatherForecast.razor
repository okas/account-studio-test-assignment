@page "/weatherforecast"


@using System.Reflection
@using WeatherUI.Client.ApiClientServices
@using WeatherUI.Shared;
@using WeatherUI.Client.Helpers

@inject WeatherForecastsHttpClientService WatherForecastsService
@inject PageViewItemsHttpClientService PageViewItemService
@inject IStringLocalizer<Resources.PageWeatherForecast> L10n
@inject IStringLocalizer<Resources.General> L10nGeneral
@inject IStringLocalizer<Shared.Resources.WeatherForecast> L10nWeatherForecast

@code {
    const string PAGE_ID = "page-weatherforecast";

    const string HC_USERID = "u1";

    private IList<PageViewItem> Header { get; set; } = Array.Empty<PageViewItem>();

    private IList<IDictionary<string, object>>? ViewModels { get; set; } = default;

    private int? StartedIndex { get; set; }

    private bool IsControlsVisible { get; set; } = false;

    private static string ToPath(object id)
    {
        return $"weatherforecast/{id}";
    }

    private string CreateId(PageViewItem field)
    {
        return $"header_{@field.Name}";
    }

    private void ToggleHeaderControls()
    {
        IsControlsVisible = !IsControlsVisible;
    }

    private async Task ToggleField(ChangeEventArgs evt, PageViewItem vm)
    {
        vm.Selected = (bool)evt.Value!;

        await StorePageControlsChanges();
    }

    private void ItemMovingChange(Tuple<int, bool> change)
    {
        StartedIndex = change.Item2 ? change.Item1 : null;
    }

    private async Task ItemDropedOn(int index)
    {
        ChnageIndices(index);
        StartedIndex = null;

        await StorePageControlsChanges();
    }

    private void ChnageIndices(int targetIndex)
    {
        PageViewItem starter = Header.Single(i => i.Index == StartedIndex);

        if (StartedIndex < targetIndex)
        {
            Header.Where(i => i.Index > StartedIndex && i.Index <= targetIndex)
                .ToList().ForEach(i => i.Index--);
        }
        else
        {
            Header.Where(i => i.Index < StartedIndex && i.Index >= targetIndex)
                .ToList().ForEach(i => i.Index++);
        }

        starter.Index = targetIndex;
    }

    private async Task StorePageControlsChanges()
    {
        var shapedRawData = Header.Select(f => new PageViewItemPatchDto(f.Id, f.Index, f.Selected)).ToList();

        await PageViewItemService.StorePartialChanges(shapedRawData);
    }

    private static IList<PageViewItem> GetDefaultHeader()
    {
        int idx = 0;

        return new List<PageViewItem>()
        {
            new () { Index = idx, Name = nameof(WeatherForecast.Id), Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.Date), Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.TemperatureC), Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.TemperatureF), Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.Summary), Selected = true },
        };
    }

    private IList<IDictionary<string, object>> ViewModelMapper(IEnumerable<WeatherForecast> models)
    {
        PropertyInfo[] properties = typeof(WeatherForecast).GetProperties();

        Func<WeatherForecast, IDictionary<string, object>> mapper = (model) => Header.Aggregate(
            new Dictionary<string, object>(),
            (acc, field) =>
            {
                PropertyInfo property = properties.Single(p => p.Name == field.Name);

                acc.Add(property.Name, property.GetValue(model)!);

                return acc;
            }
        );

        return models.Select(mapper).ToList();
    }

    private async Task InitUserPageInfo()
    {
        var storedHeader = await PageViewItemService.GetForViewAsync(PAGE_ID, HC_USERID);

        Header = storedHeader?.ToList() ?? GetDefaultHeader();
    }

    private async Task InitPageViewModel()
    {
        var forecasts = await WatherForecastsService.GetForecastAsync();

        if (forecasts is not null && forecasts.Any())
        {
            ViewModels = ViewModelMapper(forecasts);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await InitUserPageInfo();
        await InitPageViewModel();
    }
}


<PageTitle>
    @L10n["Title"]
</PageTitle>

<header>
    <h1>@L10n["Title"]</h1>
</header>

<p>@L10n["Str_1"]</p>

<section>
    <button @onclick=ToggleHeaderControls @onclick:preventDefault>
        @L10nGeneral["ShowLayoutTools"]
    </button>
</section>

@if (ViewModels is null)
{
    <p>
        <em>@L10nGeneral["Loading"]...</em>
    </p>
}
else
{
    @if (IsControlsVisible)
    {
        <section class="controls">
            @foreach (PageViewItem f in Header)
            {
                string elemId = CreateId(f);

                <div @key=@f.Name>
                    <label for=@elemId>@L10nWeatherForecast[f.Name]</label>
                    <input id=@elemId type="checkbox" checked=@f.Selected @onchange=@(evt => ToggleField(evt, f)) @onchange:preventDefault />
                </div>
            }
        </section>
    }
    <table class="table">
        <thead>

            <DragZone Data=@Header.Where(f => f.Selected).OrderBy(f => f.Index)>

                <ListTemplate Context="header">
                    <tr class=@(IsControlsVisible ? "drag-zone" : "")>
                        @header
                    </tr>
                </ListTemplate>

                <ItemTemplate Context="field">

                    <DragItem Tag="th"
                          Active=@IsControlsVisible
                          Index=@field.Index
                          OnDroppedToOther=@ItemDropedOn
                          OnMovingChanged=@ItemMovingChange>
                        @L10nWeatherForecast[field.Name]
                    </DragItem>

                </ItemTemplate>

            </DragZone>

        </thead>
        <tbody>

            <Virtualize Items="ViewModels">
                <tr @key=@context>
                    @foreach (PageViewItem pi in Header.Where(i => i.Selected).OrderBy(i => i.Index))
                    {
                        object value = context[pi.Name];

                        <td @key=context[pi.Name]>
                            @if (pi.Name == nameof(WeatherForecast.Date))
                            {
                                @Convert.ToDateTime(value).ToShortDateString()
                            }
                            else if (pi.Name == nameof(WeatherForecast.Id))
                            {
                                <NavLink href=@ToPath(value)>
                                    🔗
                                </NavLink>
                            }
                            else
                            {
                                @value
                            }
                        </td>
                    }
                </tr>
            </Virtualize>

        </tbody>
    </table>
}

