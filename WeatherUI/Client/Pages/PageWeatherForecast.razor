@page "/weatherforecast"

@using System.Reflection
@using WeatherUI.Shared;
@using WeatherUI.Client.Helpers
@inject HttpClient Http;


@code {
    const string PageTitle = "Weather forecast";

    private IList<Field> _header = Array.Empty<Field>();

    private IList<IDictionary<string, dynamic>>? viewModels = default;

    public PageWeatherForecast()
    {
        int idx = 0;
        // Represents table metadata, mainly it's header. Here it is possible to handle i18n matters.
        DefaultHeader = new List<Field>()
        {
            new () { Index = idx, Name = nameof(WeatherForecast.Id), DisplayName = "Link", Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.Date), DisplayName = "Date", Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.TemperatureC), DisplayName = "Temp. (C)", Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.TemperatureF), DisplayName = "Temp. (F)", Selected = true },
            new () { Index = ++idx, Name = nameof(WeatherForecast.Summary), DisplayName = "Summary", Selected = true },
        };
    }

    private IReadOnlyList<Field> DefaultHeader { get; init; } = Array.Empty<Field>();

    private IList<Field> Header { get; set; } = Array.Empty<Field>();

    private int? StartedIndex { get; set; }

    private bool IsControlsVisible { get; set; } = false;

    private static string ToPath(Guid id)
    {
        return $"weatherforecast/{id}";
    }

    private string CreateId(Field field)
    {
        return $"header_{@field.Name}";
    }

    private void ToggleHeaderControls()
    {
        IsControlsVisible = !IsControlsVisible;
    }

    private void ItemMovingChange(Tuple<int, bool> change)
    {
        StartedIndex = change.Item2 ? change.Item1 : null;
    }

    private void ItemDropedOn(int index)
    {
        ChnageIndices(index);
        StartedIndex = null;
    }

    private void ChnageIndices(int targetIndex)
    {
        Field starter = Header.Single(i => i.Index == StartedIndex);

        if (StartedIndex < targetIndex)
        {
            Header.Where(i => i.Index > StartedIndex && i.Index <= targetIndex)
                .ToList().ForEach(i => i.Index--);
        }
        else
        {
            Header.Where(i => i.Index < StartedIndex && i.Index >= targetIndex)
                .ToList().ForEach(i => i.Index++);
        }

        starter.Index = targetIndex;
    }

    private IList<IDictionary<string, dynamic>> ViewModelMapper(IEnumerable<WeatherForecast> models)
    {
        PropertyInfo[] properties = typeof(WeatherForecast).GetProperties();

        Func<WeatherForecast, IDictionary<string, object>> mapper = (model) => Header.Aggregate(
            new Dictionary<string, object>(),
            (acc, field) =>
            {
                var property = properties.Single(p => p.Name == field.Name);

                acc.Add(property.Name, new
                {
                    Value = property.GetValue(model),
                    Field = field
                });

                return acc;
            }
        );

        return models.Select(mapper).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        Header = DefaultHeader.Select(f => f with { }).ToList();

        var forecasts = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>("api/weatherforecasts");

        if (forecasts is not null && forecasts.Any())
        {
            viewModels = ViewModelMapper(forecasts);
        }
    }
}


<PageTitle>
    @PageTitle
</PageTitle>

<header>
    <h1>@PageTitle</h1>
</header>

<p>This component demonstrates fetching data from the server.</p>

<section>
    <button @onclick=ToggleHeaderControls @onclick:preventDefault>
        Show layout tools
    </button>
</section>

@if (viewModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (IsControlsVisible)
    {
        <section class="controls">
            @foreach (Field f in Header)
            {
                string elemId = CreateId(f);

                <div @key=@f.Name>
                    <label for=@elemId>@f.DisplayName</label>
                    <input id=@elemId type="checkbox" @bind=@f.Selected @onchange:preventDefault />
                </div>
            }
        </section>
    }
    <table class="table">
        <thead>

            <DragZone Data=@Header.Where(f => f.Selected).OrderBy(f => f.Index)>

                <ListTemplate Context="header">
                    <tr class=@(@IsControlsVisible ? "drag-zone" : "")>
                        @header
                    </tr>
                </ListTemplate>

                <ItemTemplate Context="field">

                    <DragItem Tag="th"
                          Active=@IsControlsVisible
                          Index=@field.Index
                          OnDroppedToOther=@ItemDropedOn
                          OnMovingChanged=@ItemMovingChange>
                        @field.DisplayName
                    </DragItem>

                </ItemTemplate>

            </DragZone>

        </thead>
        <tbody>
            <Virtualize Items="viewModels">
                <tr @key=@context[nameof(WeatherForecast.Id)].Value>
                    @foreach (KeyValuePair<string, dynamic> vm in context.Where(kv => kv.Value.Field.Selected).OrderBy(kv => kv.Value.Field.Index))
                    {
                        <td @key=vm.Key>
                            @if (vm.Key == nameof(WeatherForecast.Date))
                            {
                                @Convert.ToDateTime(vm.Value.Value).ToShortDateString()
                            }
                            else if (vm.Key == nameof(WeatherForecast.Id))
                            {
                                <NavLink href=@ToPath(context[nameof(WeatherForecast.Id)].Value)>
                                    🔗
                                </NavLink>
                            }
                            else
                            {
                                @vm.Value.Value
                            }
                        </td>
                    }
                </tr>
            </Virtualize>
        </tbody>
    </table>
}

