@page "/weatherforecast"

@using System.Reflection
@using WeatherUI.Shared;
@using System.Dynamic
@using WeatherUI.Client.Helpers
@inject HttpClient Http;


@code {
    const string PageTitle = "Weather forecast";

    public PageWeatherForecast()
    {
        // Represents table metadata, mainly it's header. Here it is possible to handle i18n matters.
        Header = new()
        {
            new Field() { Index = 0, Name = nameof(WeatherForecast.Date), DisplayName = "Date", Selected = true },
            new Field() { Index = 1, Name = nameof(WeatherForecast.TemperatureC), DisplayName = "Temp. C", Selected = true },
            new Field() { Index = 2, Name = nameof(WeatherForecast.TemperatureF), DisplayName = "Temp. F", Selected = true },
            new Field() { Index = 3, Name = nameof(WeatherForecast.Summary), DisplayName = "Summary", Selected = true },
        };
    }

    private List<Field> Header { get; set; } = new();

    private IList<IDictionary<string, dynamic>>? viewModels;

    private bool IsControlsVisible { get; set; } = false;

    private static string ToPath(DateTime date)
    {
        return $"weatherforecast/{date.ToString("yyyy-MM-dd")}";
    }

    private string CreateId(Field field)
    {
        return $"header_{@field.Name}";
    }

    private void ToggleHeaderControls()
    {
        IsControlsVisible = !IsControlsVisible;
    }

    private string ToHide(Field field)
    {
        return field.Selected ? "" : "hidden";
    }

    private IDictionary<string, dynamic> ViewModelMapper(WeatherForecast model)
    {
        PropertyInfo[] properties = model.GetType().GetProperties();

        IDictionary<string, object> viewModel = Header.Aggregate(
            new Dictionary<string, object>(),
            (acc, field) =>
            {
                var property = properties.Single(p => p.Name == field.Name);

                acc.Add(property.Name, new
                {
                    Value = property.GetValue(model),
                    Field = field
                });

                return acc;
            }
        );

        return viewModel;
    }

    protected override async Task OnInitializedAsync()
    {
        var forecasts = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>("api/weatherforecasts");

        viewModels = forecasts?.Select(ViewModelMapper).ToList();
    }
}


<PageTitle>@PageTitle</PageTitle>

<header>
    <h1>@PageTitle</h1>
</header>

<p>This component demonstrates fetching data from the server.</p>

<section>
    <button @onclick="ToggleHeaderControls">Change data layout</button>
</section>

@if (viewModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (IsControlsVisible)
    {
        <section class="controls">
            @foreach (Field f in Header.OrderBy(f => f.Index))
            {
                <div @key=@f.Name>
                    <label for=@CreateId(f)>@f.DisplayName</label>
                    <input id=@CreateId(f) type="checkbox" @bind=@f.Selected @onchange:preventDefault />
                </div>
            }
        </section>
    }
    <table class="table">
        <thead>
            <tr>
                @foreach (Field f in Header.OrderBy(f => f.Index))
                {
                    <th @key=@f.Name class=@ToHide(f)>@f.DisplayName</th>
                }
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="viewModels">
                <tr @key="@(context["Date"].Value)">
                    @foreach (KeyValuePair<string, dynamic> vm in context.OrderBy(kv => kv.Value.Field.Index))
                    {
                        <td class=@ToHide(vm.Value.Field)>
                            @if (vm.Key == "Date")
                            {
                                DateTime date = Convert.ToDateTime(vm.Value.Value);

                                <NavLink href=@ToPath(date)>
                                    @date.ToShortDateString()
                                </NavLink>
                            }
                            else
                            {
                                @vm.Value.Value
                            }
                        </td>
                    }
                </tr>
            </Virtualize>
        </tbody>
    </table>
}
