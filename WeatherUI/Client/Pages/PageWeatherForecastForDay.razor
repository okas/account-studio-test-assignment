@page "/weatherforecast/{id:guid}"


@using WeatherUI.Client.ApiClientServices
@using WeatherUI.Shared

@inject WeatherForecastsHttpClientService WeatherForecastsService
@inject IStringLocalizer<Resources.PageWeatherForecastForDay> L10n
@inject IStringLocalizer<Resources.General> L10nGeneral
@inject IStringLocalizer<Shared.Resources.WeatherForecast> L10nWeatherForecast

@code {
    const string PAGE_ID = "page-weatherforecast";

    const string HC_USERID = "u1";

    [Parameter]
    public Guid Id { get; set; }

    private WeatherForecast? Forecast { get; set; } = default;

    protected override async Task OnInitializedAsync()
    {
        Forecast = await WeatherForecastsService.GetOne(Id);
    }
}


<PageTitle>
    @L10n["Title"]
</PageTitle>

<header>
    <h1>@L10n["Title"]</h1>
</header>

<p>
    <NavLink href="weatherforecast">
        ⬅️ @L10nGeneral["Back"]
    </NavLink>
</p>

@if (Forecast is null)
{
    <p>
        <em>@L10nGeneral["Loading"]...</em>
    </p>
}
else
{
    <dl>
        <dt>
            @L10nWeatherForecast[nameof(WeatherForecast.Date)]
        </dt>
        <dd>
            @Forecast?.Date.ToShortDateString()
        </dd>

        <dt>
            @L10nWeatherForecast[nameof(WeatherForecast.TemperatureC)]
        </dt>
        <dd>
            @Forecast?.TemperatureC
        </dd>

        <dt>
            @L10nWeatherForecast[nameof(WeatherForecast.TemperatureF)]
        </dt>
        <dd>
            @Forecast?.TemperatureF
        </dd>

        <dt>
            @L10nWeatherForecast[nameof(WeatherForecast.Summary)]
        </dt>
        <dd>
            @Forecast?.Summary
        </dd>
    </dl>
}


